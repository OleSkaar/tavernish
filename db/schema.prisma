// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens    Token[]
  sessions  Session[]
  Character Character[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }

enum UserRole {
  GM
  PLAYER
}

enum AbilityRank {
  NO
  PATHETIC
  HORRIBLE
  TERRIBLE
  POOR
  MEDICORE
  AVERAGE
  GOOD
  GREAT
  EXCELLENT
  GODLIKE
}

model Ability {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  name         String
  ranking      AbilityRank
  isBioAbility Boolean
  Character    Character?  @relation(fields: [characterId], references: [id])
  characterId  Int?
}

model Character {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  name         String
  rank         String?
  titles       String?
  flaw         String?
  player       User          @relation(fields: [userId], references: [id])
  abilities    Ability[]
  userId       Int
  GameSessions GameSession[]
}

model GameSession {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  number      Int         @default(autoincrement())
  name        String?
  dateStarted DateTime?
  dateEnded   DateTime?
  characters  Character[]
}
